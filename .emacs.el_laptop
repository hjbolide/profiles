(setq default-major-mode 'text-mode);;启动文字模式
(fset 'yes-or-no-p 'y-or-n-p);;精简确认
(column-number-mode t);;列号
(show-paren-mode t);显示括号匹配 
;;时间显示设置
;;启用时间显示设置，在minibuffer上面的那个杠上（忘了叫什么来着）
(display-time-mode 1)
;;时间使用24小时制
(setq display-time-24hr-format t)
;;时间显示包括日期和具体时间
(setq display-time-day-and-date t)
;;时间栏旁边启用邮件设置
(setq display-time-use-mail-icon t)
;;时间的变化频率，单位多少来着？
(setq display-time-interval 10) 
(global-font-lock-mode t);语法高亮 
(auto-image-file-mode t);打开图片显示功能
(mouse-avoidance-mode 'animate);光标靠近鼠标指针时，让鼠标指针自动让开
(setq mouse-yank-at-point t);支持中键粘贴
(setq x-select-enable-clipboard t);支持emacs和外部程序的粘贴 
(setq frame-title-format "Programming");在标题栏提示你目前在什么位置。
(transient-mark-mode t);高亮复制区域
(setq calendar-load-hook
'(lambda ()
(set-face-foreground 'diary-face "skyblue")
(set-face-background 'holiday-face "slate blue")
(set-face-foreground 'holiday-face "white")))
;;去掉工具栏
(tool-bar-mode nil)

;;允许minibuffer自由变化其大小（指宽度）
(setq resize-mini-windows t)
;;当寻找一个同名的文件，自动关联上那个文件？
(setq uniquify-buffer-name-style 'forward)
;;在emacs读man文档时，使用当前buffer
(setq Man-notify-method 'pushy)

;;是用滚轴鼠标
(mouse-wheel-mode t)
;;去掉烦人的警告铃声
(setq visible-bell nil)
;;滚动页面时比较舒服，不要整页的滚动
(setq scroll-step 1
scroll-margin 3
scroll-conservatively 10000)

;;设定句子结尾，主要是针对中文设置
(setq sentence-end "\\([¡££¡£¿]\\|¡¡\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
(setq sentence-end-double-space nil)
;;去掉Emacs和gnus启动时的引导界面
(setq inhibit-startup-message t)
(setq gnus-inhibit-startup-message t)
;;当指针移到另一行，不要新增这一行
(setq next-line-add-newlines nil)

;;在文档最后自动插入空白一行，好像某些系统配置文件是需要这样的
(setq require-final-newline t)
(setq track-eol t)
;;使用C-k删掉指针到改行末的所有东西
(setq-default kill-whole-line t)
;;设定删除保存记录为200，可以方便以后无限恢复
(setq kill-ring-max 200)

;;增大使用查找函数和变量的寻找范围
(setq apropos-do-all t)
;;是用aspell程序作为Emacs的拼写检查程序
(setq-default ispell-program-name "aspell")

;;整体环境设置
;;(set-language-environment 'Chinese-GB)

;;字体解码优先顺序
;;从王垠那拷过来的，不用怎么再改吧。
(setq font-encoding-alist
(append '(("MuleTibetan-0" (tibetan . 0))
("GB2312" (chinese-gb2312 . 0))
("JISX0208" (japanese-jisx0208 . 0))
("JISX0212" (japanese-jisx0212 . 0))
("VISCII" (vietnamese-viscii-lower . 0))
("KSC5601" (korean-ksc5601 . 0))
("MuleArabic-0" (arabic-digit . 0))
("MuleArabic-1" (arabic-1-column . 0))
("MuleArabic-2" (arabic-2-column . 0))) font-encoding-alist)) 

;;设置我所在地方的经纬度，calendar里有个功能是日月食的预测，和你的经纬度相联系的。
(setq calendar-latitude +43.43)
(setq calendar-longitude +125.19)
;;设所在地方的经纬度，calendar里有个功能是日月食的预测，和你的经纬度相联系的。


(setq calendar-location-name "Changchun"
;;设置所在地名称
)
;;这个做什么的？忘了，有谁能告诉我，谢谢。
;;我的配置文件里很多东西忘了，欢迎大家来指正下
(setq calendar-remove-frame-by-deleting t)
;;设定一周的开始为周一
(setq calendar-week-start-day 1)
;;节日和生日提醒设置
;;我不过基督徒的节日、希伯来人的节日和伊斯兰教的节日。
;;我是无神论者，不过我喜欢神话，大家有兴趣也可以探讨一下，发email给我吧

(setq other-holidays
      `(
	(holiday-fixed 1 1 "元旦")
	(holiday-lunar 12 30 "春节" 0)
	(holiday-lunar 1 1 "春节" 0)
	(holiday-lunar 1 2 "春节" 0)
	(holiday-solar-term "清明" "清明节")
	(holiday-fixed 5 1 "劳动节")
	(holiday-lunar 5 5 "端午节" 0)
	(holiday-lunar 8 15 "中秋节" 0)
	(holiday-fixed 10 1 "国庆节")
	(holiday-fixed 10 2 "国庆节")
	(holiday-fixed 10 3 "国庆节")
	)
)

;;设定一些自定义的生日和节日
(add-to-list 'load-path "~/Apps/Emacs")
(setq christian-holidays nil)
(setq hebrew-holidays nil)
(setq islamic-holidays nil)
(setq julian-holidays nil)
;;其他的一些设置
;;日历不和日记相连，我不用Calendar自带的diary记日记
;;(setq mark-diary-entries-in-calendar nil)
;;这个又忘了，我真是忘性好！
(setq appt-issue-message nil)
;;在日历中突出标记节日和生日
(setq mark-holidays-in-calendar t)
;;打开calendar自动打开节日和生日列表
(setq view-calendar-holidays-initially t)

;;可以操作压缩文档
(auto-compression-mode 1)

(setq delete-auto-save-file t
;;档案存储后删除~文件
)

(setq make-backup-files nil);;delete backup files
;;(setq debug-on-error 1);;when error, go into debug
(setq imenu-auto-rescan 1);;auto scan the function name
(set-scroll-bar-mode nil);;delete scroll bar

(blink-cursor-mode -1
;;停止指针的闪动
)

(add-hook 'texinfo-mode-hook (lambda () (require 'sb-texinfo)))
(load-file "~/Apps/Emacs/cedet-1.0pre4/common/cedet.el")
(semantic-load-enable-code-helpers)
(autoload 'speedbar-frame-mode "speedbar" "Popup a speedbar frame" t)
(autoload 'speedbar-get-focus "speedbar" "Jump to speedbar frame" t)
(define-key-after (lookup-key global-map [menu-bar tools])
[speedbar]
'("Speedbar" .
speedbar-frame-mode)
[calendar]) 

(setq hippie-expand-try-functions-list
 	  '(
		senator-try-expand-semantic
		try-expand-dabbrev
		try-expand-dabbrev-visible
		try-expand-dabbrev-all-buffers
		try-expand-dabbrev-from-kill
		try-expand-list
		try-expand-list-all-buffers
		try-expand-line
        try-expand-line-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-whole-kill
        )
)
(global-set-key [(meta p)] 'hippie-expand)

(add-to-list 'load-path "~/Apps/Emacs/ecb-snap")
(require 'ecb) 

(add-to-list 'load-path "~/Apps/Emacs")
(require 'tabbar)
(tabbar-mode)
(global-set-key (kbd "C-<tab>") 'tabbar-forward)
(global-set-key (kbd "C-`") `tabbar-backward)
(setq tabbar-buffer-groups-function
          (lambda (buffer)
            (list "All buffers")))

(add-to-list 'load-path "~/Apps/Emacs/yasnippet-0.5.6")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/Apps/Emacs/yasnippet-0.5.6/snippets")

(add-to-list 'load-path "~/Apps/Emacs/color-theme-6.6.0")
(require 'color-theme)
(color-theme-initialize)
(color-theme-jedit-grey)

(global-set-key [(f5)] 'gdb)
(global-set-key [(f3)] 'speedbar)
(global-set-key [(f2)] 'calendar)
(global-set-key [(C-f4)] 'kill-this-buffer)
(global-set-key [(meta w)] 'shell-command)
(global-set-key [(C-f3)] 'delete-other-windows)

(global-set-key [(XF86AudioNext)] 'emms-next)
(global-set-key [(XF86AudioPrev)] 'emms-previous)
(global-set-key [(XF86AudioStop)] 'emms-stop)
(global-set-key [(XF86AudioPlay)] 'emms-pause)


(add-to-list 'load-path "~/Apps/Emacs/php-mode-1.4.0")
(require 'php-mode)
(add-hook 'php-mode-user-hook 'turn-on-font-lock)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(c-default-style (quote ((c-mode . "awk") (c++-mode . "awk") (objc-mode . "awk") (java-mode . "awk") (awk-mode . "awk") (other . "awk"))))
 '(column-number-mode t)
 '(cua-mode t nil (cua-base))
 '(delete-selection-mode nil)
 '(display-time-mode t)
 '(ecb-options-version "2.33beta2")
 '(eudc-protocol nil)
 '(eudc-server nil)
 '(jabber-account-list (quote (("hjbolide@gmail.com" (:password . "ilovesimonzhao") (:network-server . "talk.google.com") (:port . 5223) (:connection-type . ssl)))))
 '(ldap-host-parameters-alist nil)
 '(mark-even-if-inactive t)
 '(scroll-bar-mode (quote right))
 '(transient-mark-mode 1))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "grey77" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 102 :width normal :foundry "microsoft" :family "YaHei Consolas Hybrid")))))
(require 'tramp)
(setq tramp-default-method "ftp")

(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-hook 'lua-mode-hook 'turn-on-font-lock)
(add-hook 'lua-mode-hook 'hs-minor-mode)

;(setq gdb-many-windows t)
;(load-library "gud.el")
;(load-library "gdb-ui.el")

;(add-to-list 'load-path "~/Apps/Emacs/emacs-w3m/")
;(autoload 'w3m "w3m" "Interface for w3m on Emacs." t)
;(setq w3m-use-cookies 't)
;(require 'w3m)

;(add-to-list 'load-path "~/Apps/Emacs/emms/")
;(require 'emms-setup)
;(emms-standard)
;(emms-default-players)

;(add-hook 'emms-player-started-hook 'emms-show)
;(setq emms-show-format "NP: %s")
;(setq emms-source-file-default-directory "/mnt/wine/KuGou/")
;(setq emms-player-mpg321-parameters '("-o" "alsa"))

(defun lookup-word-definition ()
  (interactive)
  (let (myword myurl)
    (setq myword
	  (if (and transient-mark-mode mark-active)
	      (buffer-substring-no-properties (region-beginning) (region-end))
	    (thing-at-point 'symbol)))
    
    ;;(setq myword (replace-regexp-in-string " " "%20" myword))
    (setq myurl (concat "http://www.merriam-webster.com/dictionary/" myword))
    
    ;(browse-url myurl)
    (w3m-browse-url myurl) ;; if you want to browse using w3m
    ))

(global-set-key (kbd "<f8>") 'lookup-word-definition)
(global-set-key "\C-co" 'c-open-and-prepare)
(global-set-key "\C-cp" 'c-prepare)

(add-hook 'c-mode-common-hook
	  '(lambda ()
	     ;; use spaces instead of tabs
	     (setq indent-tabs-mode nil)
	     (c-toggle-auto-hungry-state)
	     (define-key c-mode-map "\C-m" 'c-context-line-break)
	     (c-add-style "PERSONAL"
			  '(
			    ;; do not automatically insert a new line
			    ;; after a semi-colon if the next line
			    ;; is not empty
			    (c-hanging-semi&comma-criteria
			     c-semi&comma-no-newlines-before-nonblanks
			     c-semi&comma-inside-parenlist)
			    (c-hanging-braces-alist
			     ;; for array initializations
			     (brace-list-open)
			     (brace-list-close)
			     (brace-list-intro)
			     (brace-entry-open)
			     ;; for function definitions
			     (defun-open after)
			     ;; for beginning of block constructs
			     (substatement-open after)
			     ;; for end of block constructs
			     (block-close . c-snug-do-while)
			     ;; for beginning of struct constructs
			     (class-open after)
			     ;; for end of struct constructs
			     (class-close))
			    (c-hanging-colons-alist
			     ;; for switch constructs
			     (case-label after))
			    (c-offsets-alist
			     ;; for strings displayed across many lines
			     (string 0)
			     ;; for switch constructs
			     (case-label 4)))
			  t)))
(defun c-prepare ()
  "Facilitates the compilation and debugging of C programs.
In a frame that displays a .c file,
and possibly the *compilation* or *gud-a.out* buffer,
- creates an associated Makefile with the _getfilenames and _mmakefile perl scripts,
unless a Makefile not created by _mmakefile already exists;
- runs make;
- if the compilation is successful, launches gdb,
replaces the *compilation* buffer by the *gud-a.out* buffer,
and leaves point in *gud-a.out* buffer;
- if the compilation is not successful, places point on line of first error
in the buffer that displays the source file.
The point can be either in the window that displays the .c file,
or in the window that displays the *compilation* or *gud-a.out* buffers,
and the .c file will be silently saved.
The .c file F that is displayed might contain pathnames to other source files (that can contain
spaces, can leave out the .c extension, can be relative or absolute but should not start in ~,
and can be preceded or followed by spaces or stars) between a line that contains an
occurrence of 'Other .c source files, if any, one per line, starting on the next line:'
and a line all of whose nonblank characters are stars with a closing comment */ after all
stars, possibly with lines containing nothing but spaces or stars in-between.
Exactly one of F and the other files must contain a main() function, and
the Makefile will be generated in the directory where that file resides."
  (interactive)
  (if (string-match "\*\\(compilation\\|gud-a.out\\)\*"
		    (buffer-name (current-buffer)))
      (other-window 1))
  (save-buffer)
  (let* ((file (buffer-file-name))
	 (getfilenames-proc (start-process "getfilenames-process" nil "_getfilenames" file)))
    (set-process-filter getfilenames-proc 'c-getfilenames)
    (while (eq (process-status getfilenames-proc) 'run)
      (sleep-for 1))
    (if (not (= (process-exit-status getfilenames-proc) 0))
	(progn
	  (message files)
	  (message "No Makefile can be generated from the provided set of files"))
      (c-create-makefile files)
      ;; _getfilenames returns:
      ;; - the absolute directory where the source file with the main() function resides,
      ;; - the absolute pathname to the source file with the main() function, and
      ;; - the absolute pathnames to all source files, including the latter and
      ;; lexicographically ordered.
      ;; Space separate these pathnames, and spaces in pathnames have been replaced
      ;; by Control B characters.
      ;; These control B characters are replaced by unescaped spaces in the first two pathnames
      ;; returned by _getfilenames, in accordance with their original values,
      ;; so that they can be processed properly by Lisp Emacs.
      (let* ((main-dir (replace-regexp-in-string "" " " (car (split-string files))))
	     (main-file (replace-regexp-in-string "" " " (cadr (split-string files))))
	     (all-files (cddr (split-string files))))	   
	(if (file-exists-p (concat main-dir "Makefile"))
	    (c-compile-and-run-debugger main-dir main-file all-files)
	  (message "No Makefile can be generated from the provided set of files")
	  (delete-other-windows))))))
(defun c-open-and-prepare (file)
  "Opens or creates a .c file and prepares compilation, debugging and running.
- Takes a file name as single argument, with either no extension
or with the .c extension;
- if such a file does exist, uses it, otherwise, creates one with the _mctemplate shell script,
prompting the user for an m character in case he or she wants a file that includes the line
'Other .c source files, if any, one per line, starting on the next line:' needed for programs
that span many files, whereas just hitting carriage return will produce a template
for a sourcefile meant to contain the full program;
- opens the file in a new buffer;
- creates an associated Makefile with the _mmakefile perl script,
unless a Makefile not created by _mmakefile already exists;
- if the file has been created by _mctemplate, places the point to insert
a short description after 'Description: ';
- if the file has not been created by _mctemplate, runs make;
- if the compilation is successful, launches gdb,
replaces the *compilation* buffer by the *gud-a.out* buffer,
and leaves point in *gud-a.out* buffer;
- if the compilation is not successful, places point on line of first error
in the buffer that displays the source file.
The .c file F that is displayed might contain pathnames to other source files (that can contain
spaces, can leave out the .c extension, can be relative or absolute but should not start in ~,
and can be preceded or followed by spaces or stars) between a line that contains an
occurrence of 'Other .c source files, if any, one per line, starting on the next line:'
and a line all of whose nonblank characters are stars with a closing comment */ after all
stars, possibly with lines containing nothing but spaces or stars in-between.
Exactly one of F and the other files must contain a main() function, and
the Makefile will be generated in the directory where that file resides."
  (interactive "FEnter name of main file for a C program: ")
  ;; expand-file-name converts a possibly relative pathname to a full pathname,
  ;; and deals properly with ~ or ~username.
  (setq file (expand-file-name (concat (file-name-sans-extension file) ".c")))
  (if (not (file-exists-p file))
      (c-open-new-file file)
    (find-file file)
    (let* ((file (buffer-file-name))
	   (getfilenames-proc (start-process "getfilenames-process" nil "_getfilenames" file)))
      (set-process-filter getfilenames-proc 'c-getfilenames)
      (while (eq (process-status getfilenames-proc) 'run)
	(sleep-for 1))
      (if (not (= (process-exit-status getfilenames-proc) 0))
	  (progn
	    (message files)
	    (message "No Makefile can be generated from the provided set of files"))
	(c-create-makefile files)
	;; _getfilenames returns:
	;; - the absolute directory where the source file with the main() function resides,
	;; - the absolute pathname to the source file with the main() function, and
	;; - the absolute pathnames to all source files, including the latter and
	;; lexicographically ordered.
	;; Space separate these pathnames, and spaces in pathnames have been replaced
	;; by Control B characters.
	;; These control B characters are replaced by unescaped spaces in the first two pathnames
	;; returned by _getfilenames, in accordance with their original values,
	;; so that they can be processed properly by Lisp Emacs.
	(let* ((main-dir (replace-regexp-in-string "" " " (car (split-string files))))
	       (main-file (replace-regexp-in-string "" " " (cadr (split-string files))))
	       (all-files (cddr (split-string files))))	   
	  (if (file-exists-p (concat main-dir "Makefile"))
	      (c-compile-and-run-debugger main-dir main-file all-files)
	    (message "No Makefile can be generated from the provided set of files")
	    (delete-other-windows)))))))
(defun c-open-new-file(file)
  (if (yes-or-no-p "Do you want a template for a multiple file program? ")
      (call-process "_mctemplate" nil nil nil file "t")
    (call-process "_mctemplate" nil nil nil file ""))
  (find-file file)
  (beginning-of-buffer)
  (search-forward "Description: "))

(defun c-getfilenames (process output)
  (setq files output))

(defun c-create-makefile (files)
  ;; Lips emacs is happy with spaces in pathnames, as long as they are not escaped.
  (let ((makefile (concat (replace-regexp-in-string "" " " (car (split-string files))) "Makefile")))
    (if (file-exists-p makefile)
	;; Has this Makefile been created by mmakefile?
	(if (not (zerop (call-process "grep" nil nil nil "-qs"
				      "^# Makefile produced by _mmakefile$"
				      makefile)))
	    ;; No, so we keep this Makefile, whether it is for this source file or not.
	    (message "A Makefile not produced by _mmakefile exists.
I have not replaced it.")
	  ;; Yes, we will replace it.
	  (call-process "rm" nil nil nil makefile)))
    ;; If a Makefile needs to be created, we create it.
    (if (not (file-exists-p makefile))
	  (call-process-shell-command "_mmakefile" nil nil nil files))))
(defun c-compile-and-run-debugger (main-dir main-file all-files)
  (let ((makefile (concat main-dir "Makefile"))
	(a-out (concat main-dir "a.out")))
    (if (not (zerop (call-process "grep" nil nil nil "-Eqs"
				  "^# Makefile produced by _mmakefile$"
				  makefile)))
	(message "Makefile no produced by _mmakefile; hope that's what you want..."))	   
    (if (file-exists-p a-out)
	(delete-file a-out))
    (compile (concat "make -C \"" main-dir "\""))
    (while (eq (process-status "compilation") 'run)
      (sleep-for 1))
    (if (file-exists-p a-out)
	;; The compilation was successful.
	;; We start or restart gud if this is the first file being compiled,
	;; or if we are compiling files for a new a.out file, or if we quit the debugger,
	;; or if we (maybe inadvertently) got rid of the *gud-a.out* buffer.
	(if (or	(not (boundp 'c-last-main-dir))
		(not (equal c-last-main-dir main-dir))
		(not (equal c-last-files all-files))
		(and (eq (get-process "gud-a.out") nil)
		     (eq (get-process "gud-a.out<1>") nil)))
	    (progn
	      (setq c-last-main-dir main-dir)
	      (setq c-last-files all-files)
	      (if (get-buffer "\*gud-a.out\*")
		  (kill-buffer (get-buffer "\*gud-a.out\*")))
              (delete-other-windows)
	      (find-file main-file)
	      (gdb "gdb -q --annotate=3 a.out")
	      (gud-tooltip-mode t)
	      (split-window-vertically)
	      (switch-to-buffer (get-buffer main-file))
	      (other-window 1))
	  ;; We are compiling source files for the same a.out file, and switch
	  ;; from the *compilation* window to the *gud-a.out* window.
	  (other-window 1)
	  (switch-to-buffer (get-buffer "\*gud-a.out\*"))
	  (end-of-buffer))
      ;; The compilation was unsuccessful.
      ;; We go to the first error in the buffer that displays the source code.
      (next-error))))
